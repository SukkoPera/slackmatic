#!/bin/rc
# slackmat-clean
# cleanup after a slackmat-build
# wcm, 2005.12.07 - 2007.06.12
# ===
umask 022

TRACE_FILE = /dev/stderr
OPT_TRACE=1
OPT_ARCHIVE=1

_PROGPATH = $0
_PROG = `{basename $0}
_VERSION = 0.90
_ARGS = $*
_BUILD_FILE = 'BUILD.rc'
_ALT_BUILD = ()
_ALT_CONF = ()
_ALT_DISTFILES = ()
_ALT_PKGFILES = ()

nl='
'

CWD=`{pwd}



## === begin function definitions ===

fn mesg {
    echo '['$_PROG']: '$*
}


fn trace {
    if(!~ $OPT_TRACE 0 && !~ $TRACE_FILE'X' 'X'){
        echo '['$_PROG' TRACE]: '$* >> $TRACE_FILE
    }
}


fn error {
    echo '['$_PROG' ERROR]: '$*
}


fn fatal {
    ##exit_code = $1; shift
    exit_code = 1
    echo $_PROG' fatal: '$*
    exit $exit_code
}


fn show_usage {
    cat << %%%
$_PROG: archive and clean-up after slackmat-build
usage: $_PROG [options]
options:
  -a, --archive
      move sources and package files into archive directories

  -A, --noarchive
      do not archive sources and package files

  -B <file>, --build-file <file>
      specify alternate build file

  -c <file>, --config-file <file>
      specify configuration file

  -h, --help
      show help message

  -p <dir>, --pkg-archive <dir>
      specify directory for package archive

  -s <dir>, --source-archive <dir>
      specify directory for source archive

  -t, --trace
      print "trace" output to stderr

  -T, --notrace
      suppress "trace" output

%%%

    return 0
}


fn is_url {
    if(~ $1'X' 'X'){
        return 1
    }
    if(echo $1 | grep '^[^:]*://' >/dev/null >[2]/dev/null){
        return 0
    }
    if(echo $1 | grep '^MYFETCH:' >/dev/null >[2]/dev/null){
        return 0
    }
    return 1
}


fn local_file {
    ## parse $1
    ## strip 'MYFETCH:' or url prefix and leading dirs
    ## return filename
    if(!~ $1'X' 'X'){
        switch($1){
            case MYFETCH:*
                f = `{echo $1 | sed 's}^MYFETCH:}}'}
            case *
                f = `{echo $1 | sed 's}^.*://.*/}}g'}
        }
        echo $f 
    }
}


fn do_config {
    trace 'configuration ...'

    if(!~ $_ALT_CONF'X' 'X'){
        ## read alternate config file:
        if(! test -r $_ALT_CONF){
            fatal 'alternate configuration file '$_ALT_CONF' not found'
        } else {
            trace 'using alternate configuration file '$_ALT_CONF
            . $_ALT_CONF
        }
    } else {
        ## try to read global configuration:
        if(test -r /etc/slackmatic/slackmat.conf){
            trace 'reading /etc/slackmatic/slackmat.conf...'
            . /etc/slackmatic/slackmat.conf
        }
        ## try to read local configuration:
        if(test -r $home/.slackmatic/slackmat.conf){
            trace 'reading '$home'/.slackmatic/slackmat.conf'
            . $home/.slackmatic/slackmat.conf
        }
    }

    ## read BUILD.rc (or alternate) to get SOURCEs:
    if(!~ $_ALT_BUILD'X' 'X'){
        _BUILD_FILE = $_ALT_BUILD
    } else {
        _BUILD_FILE = $CWD/$_BUILD_FILE
    }
    
    if(test -r $_BUILD_FILE){
        trace 'reading '$_BUILD_FILE' ...'
        . $_BUILD_FILE
    } else {
        fatal 'build file not found: '$_BUILD_FILE
    }

    ## command-line reconfiguration:
    if(!~ $_ALT_DISTFILES'X' 'X'){
        SLACKMAT_DISTFILES = $_ALT_DISTFILES
    }
    if(!~ $_ALT_PKGFILES'X' 'X'){
        SLACKMAT_PKGFILES = $_ALT_PKGFILES
    }

    trace 'configuration done.'
}


fn archive_sources {
    trace 'archiving sources ...'

    if(~ $SLACKMAT_DISTFILES'X' 'X'){
        error 'archive directory for sources is not defined'
        return 1
    }

    if(! test -d $SLACKMAT_DISTFILES){
        error 'archive directory for sources not found: '$SLACKMAT_DISTFILES
        return 1
    } else {
        trace 'using source archive directory: '$SLACKMAT_DISTFILES
    }

    if(~ $SOURCE'X' 'X'){
        trace 'no sources to archive'
    } else {
        for(s in $SOURCE){
            ## only archive sources from remote urls
            ## (assume other sources distributed with repo):
            if(is_url $s){
                f=`{local_file $s}
                if(!~ $f'X' 'X' && test -r $CWD/$f){
                    mv $CWD/$f $SLACKMAT_DISTFILES/$f
                }
            }
        }
    }

    trace 'archiving sources done.'
}


fn archive_package {
    trace 'archiving package ...'

    if(~ $SLACKMAT_PKGFILES'X' 'X'){
        error 'archive directory for packages is not defined'
        return 1
    }

    if(! test -d $SLACKMAT_PKGFILES){
        error 'archive directory for packages not found: '$SLACKMAT_PKGFILES
        return 1
    } else {
        trace 'using package archive directory: '$SLACKMAT_PKGFILES
    }

    if(test -r $CWD/package){
        f = `{head -1 $CWD/package}
        if(!~ $f'X' 'X' && test -r $CWD/$f){
            trace 'archiving package: '$f
            mv $CWD/$f $SLACKMAT_PKGFILES/$f
        }
        rm -f $CWD/package
    }

    trace 'archiving package done.'
}


fn clean_work {
    trace 'removing work area ...'
    if(test -d $CWD/work){
        rm -Rf $CWD/work
    }
    trace 'removing work area done.'
}


fn do_main {
    while(~ $1 '-'*){
        switch($1){
            case ('-h' '--help')
                show_usage
                exit 0
            case ('-a' '--archive')
                OPT_ARCHIVE=1; shift
            case ('-A' '--noarchive' '--no-archive')
                OPT_ARCHIVE=0; shift
            case ('-B' '--build-file')
                if(~ $2'X' 'X' || ~ $2 '-'*){
                    fatal 'option '$1' requires an argument'
                }
                _ALT_BUILD = $2; shift 2
            case ('-c' '--config-file')
                if(~ $2'X' 'X' || ~ $2 '-'*){
                    fatal 'option '$1' requires an argument'
                }
                _ALT_CONF = $2; shift 2
            case ('-p' '--pkg-archive')
                if(~ $2'X' 'X' || ~ $2 '-'*){
                    fatal 'option '$1' requires an argument'
                }
                _ALT_PKGFILES = $2; shift 2
            case ('-s' '--source-archive')
                if(~ $2'X' 'X' || ~ $2 '-'*){
                    fatal 'option '$1' requires an argument'
                }
                _ALT_DISTFILES = $2; shift 2
            case ('-t' '--trace')
                OPT_TRACE = 1; shift
            case ('-T' '--notrace' '--no-trace')
                OPT_TRACE = 0; shift
            case ('-'*)
                error 'unknown option: '$1
                show_usage
                exit 1
        }
    }

    do_config
    if(~ $OPT_ARCHIVE 1){
        archive_sources
        archive_package
    }
    clean_work
}

do_main $*
exit 0

### EOF
